= f.semantic_fields_for method, f.object.send(method) || f.object.addresses.build(:category => method.to_s.gsub('_address', '')) do |fa|
  - uuid = fa.object_id
  - if ((f.object.errors.include?(method) && !f.object.errors.include?(:addresses)) rescue false)
    %p.inline-errors= f.object.errors[method].first

  - if f.object._validators[method.to_sym].any? { |v| v.kind_of?(EffectiveAddressFullNamePresenceValidator) }
    = fa.input :full_name, :required => true

  = fa.input :address1, :placeholder => "e.g. Asphalt Road", :label => "Address 1"
  = fa.input :address2, :label => "Address 2"
  = fa.input :city, :placeholder => "e.g. Edmonton"
  = fa.input :country_code,
    :as => :select,
    :label => 'Country',
    :prompt => 'Country...',
    :collection => region_options_for_select(EffectiveAddresses.country_codes == :all ? Carmen::Country.all : Carmen::Country.all.select{ |c| EffectiveAddresses.country_codes.include?(c.code) rescue true}, fa.object.country_code, :priority => EffectiveAddresses.country_codes_priority),
    :input_html => { 'data-effective-address-country' => uuid }

  - if fa.object.country_code.present?
    = fa.input :state_code, :as => :select, :label => "State / Province",
      :collection => region_options_for_select(Carmen::Country.coded(fa.object.country_code).subregions, fa.object.state_code),
      :prompt => 'please select a country',
      :input_html => { 'data-effective-address-state' => uuid }
  - else
    = fa.input :state_code, :as => :select, :label => "State / Province",
      :collection => [],
      :prompt => 'please select a country',
      :input_html => {:disabled => 'disabled', 'data-effective-address-state' => uuid}

  = fa.input :postal_code, :label => "Zip / Postal code", :placeholder => "e.g. A1B 2C3"
