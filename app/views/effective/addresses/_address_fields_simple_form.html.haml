= f.simple_fields_for method, (address || f.object.send(method) || f.object.addresses.build(:category => method.to_s.gsub('_address', ''))), (EffectiveAddresses.simple_form_options || {}) do |fa|
  - uuid = fa.object_id
  - method = method.to_sym

  - if ((f.object.errors.include?(method) && !f.object.errors.include?(:addresses)) rescue false)
    - fa.object.errors.add(:address1, f.object.errors[method].first)

  - if use_full_name || fa.object.errors.include?(:full_name)
    = fa.input :full_name, :required => required


  = fa.input :address1, :required => required
  = fa.input :address2
  = fa.input :city, :input_html => { 'data-effective-address-city' => uuid }, :required => required

  = fa.input :country_code, :as => :select, :collection => region_options_for_simple_form_select(), :input_html => {'data-effective-address-country' => uuid}, :required => required

  - if fa.object.try(:country_code).present?
    = fa.input :state_code, :as => :select, :collection => region_options_for_simple_form_select(Carmen::Country.coded(fa.object.country_code).subregions), :input_html => {'data-effective-address-state' => uuid}, :required => required
  - else
    = fa.input :state_code, :as => :select, :disabled => true, :collection => [], :input_html => { 'data-effective-address-state' => uuid }, :required => required

  = fa.input :postal_code, :input_html => { 'data-effective-address-postal-code' => uuid }, :required => required
